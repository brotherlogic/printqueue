// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: printqueue.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrintServiceClient is the client API for PrintService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrintServiceClient interface {
	Print(ctx context.Context, in *PrintRequest, opts ...grpc.CallOption) (*PrintResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	RegisterPrinter(ctx context.Context, in *RegisterPrinterRequest, opts ...grpc.CallOption) (*RegisterPrinterResponse, error)
}

type printServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrintServiceClient(cc grpc.ClientConnInterface) PrintServiceClient {
	return &printServiceClient{cc}
}

func (c *printServiceClient) Print(ctx context.Context, in *PrintRequest, opts ...grpc.CallOption) (*PrintResponse, error) {
	out := new(PrintResponse)
	err := c.cc.Invoke(ctx, "/printqueue.PrintService/Print", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/printqueue.PrintService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printServiceClient) RegisterPrinter(ctx context.Context, in *RegisterPrinterRequest, opts ...grpc.CallOption) (*RegisterPrinterResponse, error) {
	out := new(RegisterPrinterResponse)
	err := c.cc.Invoke(ctx, "/printqueue.PrintService/RegisterPrinter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrintServiceServer is the server API for PrintService service.
// All implementations should embed UnimplementedPrintServiceServer
// for forward compatibility
type PrintServiceServer interface {
	Print(context.Context, *PrintRequest) (*PrintResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	RegisterPrinter(context.Context, *RegisterPrinterRequest) (*RegisterPrinterResponse, error)
}

// UnimplementedPrintServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPrintServiceServer struct {
}

func (UnimplementedPrintServiceServer) Print(context.Context, *PrintRequest) (*PrintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Print not implemented")
}
func (UnimplementedPrintServiceServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPrintServiceServer) RegisterPrinter(context.Context, *RegisterPrinterRequest) (*RegisterPrinterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPrinter not implemented")
}

// UnsafePrintServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrintServiceServer will
// result in compilation errors.
type UnsafePrintServiceServer interface {
	mustEmbedUnimplementedPrintServiceServer()
}

func RegisterPrintServiceServer(s grpc.ServiceRegistrar, srv PrintServiceServer) {
	s.RegisterService(&PrintService_ServiceDesc, srv)
}

func _PrintService_Print_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).Print(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/printqueue.PrintService/Print",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).Print(ctx, req.(*PrintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/printqueue.PrintService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintService_RegisterPrinter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPrinterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintServiceServer).RegisterPrinter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/printqueue.PrintService/RegisterPrinter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintServiceServer).RegisterPrinter(ctx, req.(*RegisterPrinterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrintService_ServiceDesc is the grpc.ServiceDesc for PrintService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrintService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "printqueue.PrintService",
	HandlerType: (*PrintServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Print",
			Handler:    _PrintService_Print_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PrintService_Delete_Handler,
		},
		{
			MethodName: "RegisterPrinter",
			Handler:    _PrintService_RegisterPrinter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "printqueue.proto",
}

// PrintClientServiceClient is the client API for PrintClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrintClientServiceClient interface {
	ClientPrint(ctx context.Context, in *ClientPrintRequest, opts ...grpc.CallOption) (*ClientPrintResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type printClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrintClientServiceClient(cc grpc.ClientConnInterface) PrintClientServiceClient {
	return &printClientServiceClient{cc}
}

func (c *printClientServiceClient) ClientPrint(ctx context.Context, in *ClientPrintRequest, opts ...grpc.CallOption) (*ClientPrintResponse, error) {
	out := new(ClientPrintResponse)
	err := c.cc.Invoke(ctx, "/printqueue.PrintClientService/ClientPrint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printClientServiceClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, "/printqueue.PrintClientService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrintClientServiceServer is the server API for PrintClientService service.
// All implementations should embed UnimplementedPrintClientServiceServer
// for forward compatibility
type PrintClientServiceServer interface {
	ClientPrint(context.Context, *ClientPrintRequest) (*ClientPrintResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

// UnimplementedPrintClientServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPrintClientServiceServer struct {
}

func (UnimplementedPrintClientServiceServer) ClientPrint(context.Context, *ClientPrintRequest) (*ClientPrintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientPrint not implemented")
}
func (UnimplementedPrintClientServiceServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}

// UnsafePrintClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrintClientServiceServer will
// result in compilation errors.
type UnsafePrintClientServiceServer interface {
	mustEmbedUnimplementedPrintClientServiceServer()
}

func RegisterPrintClientServiceServer(s grpc.ServiceRegistrar, srv PrintClientServiceServer) {
	s.RegisterService(&PrintClientService_ServiceDesc, srv)
}

func _PrintClientService_ClientPrint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientPrintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintClientServiceServer).ClientPrint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/printqueue.PrintClientService/ClientPrint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintClientServiceServer).ClientPrint(ctx, req.(*ClientPrintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrintClientService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrintClientServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/printqueue.PrintClientService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrintClientServiceServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrintClientService_ServiceDesc is the grpc.ServiceDesc for PrintClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrintClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "printqueue.PrintClientService",
	HandlerType: (*PrintClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClientPrint",
			Handler:    _PrintClientService_ClientPrint_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _PrintClientService_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "printqueue.proto",
}
